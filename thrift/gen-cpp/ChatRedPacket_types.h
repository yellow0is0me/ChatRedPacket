/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ChatRedPacket_TYPES_H
#define ChatRedPacket_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace crp {

class OperateException;

class QueryException;

class OperateResultDto;

class RedPacketCreateDto;

class RedPacketReceiveDto;

class RedPacketReceiveResponseDto;

class QueryByRedPacketIdDto;

class QueryResultRedPacketDto;

class QueryByUserIdDto;

class QueryResultUserDto;

class QueryResultReceiveUserDto;

typedef struct _OperateException__isset {
  _OperateException__isset() : errCode(false), message(false) {}
  bool errCode :1;
  bool message :1;
} _OperateException__isset;

class OperateException : public ::apache::thrift::TException {
 public:

  OperateException(const OperateException&);
  OperateException& operator=(const OperateException&);
  OperateException() : errCode(), message() {
  }

  virtual ~OperateException() throw();
  std::string errCode;
  std::string message;

  _OperateException__isset __isset;

  void __set_errCode(const std::string& val);

  void __set_message(const std::string& val);

  bool operator == (const OperateException & rhs) const
  {
    if (!(errCode == rhs.errCode))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const OperateException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OperateException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(OperateException &a, OperateException &b);

inline std::ostream& operator<<(std::ostream& out, const OperateException& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _QueryException__isset {
  _QueryException__isset() : errCode(false), message(false) {}
  bool errCode :1;
  bool message :1;
} _QueryException__isset;

class QueryException : public ::apache::thrift::TException {
 public:

  QueryException(const QueryException&);
  QueryException& operator=(const QueryException&);
  QueryException() : errCode(), message() {
  }

  virtual ~QueryException() throw();
  std::string errCode;
  std::string message;

  _QueryException__isset __isset;

  void __set_errCode(const std::string& val);

  void __set_message(const std::string& val);

  bool operator == (const QueryException & rhs) const
  {
    if (!(errCode == rhs.errCode))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const QueryException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(QueryException &a, QueryException &b);

inline std::ostream& operator<<(std::ostream& out, const QueryException& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _OperateResultDto__isset {
  _OperateResultDto__isset() : status(false), message(false) {}
  bool status :1;
  bool message :1;
} _OperateResultDto__isset;

class OperateResultDto {
 public:

  OperateResultDto(const OperateResultDto&);
  OperateResultDto& operator=(const OperateResultDto&);
  OperateResultDto() : status(0), message() {
  }

  virtual ~OperateResultDto() throw();
  int32_t status;
  std::string message;

  _OperateResultDto__isset __isset;

  void __set_status(const int32_t val);

  void __set_message(const std::string& val);

  bool operator == (const OperateResultDto & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const OperateResultDto &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OperateResultDto & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(OperateResultDto &a, OperateResultDto &b);

inline std::ostream& operator<<(std::ostream& out, const OperateResultDto& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _RedPacketCreateDto__isset {
  _RedPacketCreateDto__isset() : uniqueId(false), userId(false), amount(false), count(false) {}
  bool uniqueId :1;
  bool userId :1;
  bool amount :1;
  bool count :1;
} _RedPacketCreateDto__isset;

class RedPacketCreateDto {
 public:

  RedPacketCreateDto(const RedPacketCreateDto&);
  RedPacketCreateDto& operator=(const RedPacketCreateDto&);
  RedPacketCreateDto() : uniqueId(), userId(0), amount(0), count(0) {
  }

  virtual ~RedPacketCreateDto() throw();
  std::string uniqueId;
  int32_t userId;
  int32_t amount;
  int32_t count;

  _RedPacketCreateDto__isset __isset;

  void __set_uniqueId(const std::string& val);

  void __set_userId(const int32_t val);

  void __set_amount(const int32_t val);

  void __set_count(const int32_t val);

  bool operator == (const RedPacketCreateDto & rhs) const
  {
    if (!(uniqueId == rhs.uniqueId))
      return false;
    if (!(userId == rhs.userId))
      return false;
    if (!(amount == rhs.amount))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const RedPacketCreateDto &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RedPacketCreateDto & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RedPacketCreateDto &a, RedPacketCreateDto &b);

inline std::ostream& operator<<(std::ostream& out, const RedPacketCreateDto& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _RedPacketReceiveDto__isset {
  _RedPacketReceiveDto__isset() : userId(false), redPacketId(false) {}
  bool userId :1;
  bool redPacketId :1;
} _RedPacketReceiveDto__isset;

class RedPacketReceiveDto {
 public:

  RedPacketReceiveDto(const RedPacketReceiveDto&);
  RedPacketReceiveDto& operator=(const RedPacketReceiveDto&);
  RedPacketReceiveDto() : userId(0), redPacketId(0) {
  }

  virtual ~RedPacketReceiveDto() throw();
  int32_t userId;
  int32_t redPacketId;

  _RedPacketReceiveDto__isset __isset;

  void __set_userId(const int32_t val);

  void __set_redPacketId(const int32_t val);

  bool operator == (const RedPacketReceiveDto & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    if (!(redPacketId == rhs.redPacketId))
      return false;
    return true;
  }
  bool operator != (const RedPacketReceiveDto &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RedPacketReceiveDto & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RedPacketReceiveDto &a, RedPacketReceiveDto &b);

inline std::ostream& operator<<(std::ostream& out, const RedPacketReceiveDto& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _RedPacketReceiveResponseDto__isset {
  _RedPacketReceiveResponseDto__isset() : status(false), receiveAmount(false), message(false) {}
  bool status :1;
  bool receiveAmount :1;
  bool message :1;
} _RedPacketReceiveResponseDto__isset;

class RedPacketReceiveResponseDto {
 public:

  RedPacketReceiveResponseDto(const RedPacketReceiveResponseDto&);
  RedPacketReceiveResponseDto& operator=(const RedPacketReceiveResponseDto&);
  RedPacketReceiveResponseDto() : status(0), receiveAmount(0), message() {
  }

  virtual ~RedPacketReceiveResponseDto() throw();
  int32_t status;
  int32_t receiveAmount;
  std::string message;

  _RedPacketReceiveResponseDto__isset __isset;

  void __set_status(const int32_t val);

  void __set_receiveAmount(const int32_t val);

  void __set_message(const std::string& val);

  bool operator == (const RedPacketReceiveResponseDto & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(receiveAmount == rhs.receiveAmount))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const RedPacketReceiveResponseDto &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RedPacketReceiveResponseDto & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RedPacketReceiveResponseDto &a, RedPacketReceiveResponseDto &b);

inline std::ostream& operator<<(std::ostream& out, const RedPacketReceiveResponseDto& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _QueryByRedPacketIdDto__isset {
  _QueryByRedPacketIdDto__isset() : redPacketId(false) {}
  bool redPacketId :1;
} _QueryByRedPacketIdDto__isset;

class QueryByRedPacketIdDto {
 public:

  QueryByRedPacketIdDto(const QueryByRedPacketIdDto&);
  QueryByRedPacketIdDto& operator=(const QueryByRedPacketIdDto&);
  QueryByRedPacketIdDto() : redPacketId(0) {
  }

  virtual ~QueryByRedPacketIdDto() throw();
  int32_t redPacketId;

  _QueryByRedPacketIdDto__isset __isset;

  void __set_redPacketId(const int32_t val);

  bool operator == (const QueryByRedPacketIdDto & rhs) const
  {
    if (!(redPacketId == rhs.redPacketId))
      return false;
    return true;
  }
  bool operator != (const QueryByRedPacketIdDto &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryByRedPacketIdDto & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(QueryByRedPacketIdDto &a, QueryByRedPacketIdDto &b);

inline std::ostream& operator<<(std::ostream& out, const QueryByRedPacketIdDto& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _QueryResultRedPacketDto__isset {
  _QueryResultRedPacketDto__isset() : receiveUserId(false), receiveUserName(false), amount(false), time(false) {}
  bool receiveUserId :1;
  bool receiveUserName :1;
  bool amount :1;
  bool time :1;
} _QueryResultRedPacketDto__isset;

class QueryResultRedPacketDto {
 public:

  QueryResultRedPacketDto(const QueryResultRedPacketDto&);
  QueryResultRedPacketDto& operator=(const QueryResultRedPacketDto&);
  QueryResultRedPacketDto() : receiveUserId(0), receiveUserName(), amount(0), time() {
  }

  virtual ~QueryResultRedPacketDto() throw();
  int32_t receiveUserId;
  std::string receiveUserName;
  int32_t amount;
  std::string time;

  _QueryResultRedPacketDto__isset __isset;

  void __set_receiveUserId(const int32_t val);

  void __set_receiveUserName(const std::string& val);

  void __set_amount(const int32_t val);

  void __set_time(const std::string& val);

  bool operator == (const QueryResultRedPacketDto & rhs) const
  {
    if (!(receiveUserId == rhs.receiveUserId))
      return false;
    if (!(receiveUserName == rhs.receiveUserName))
      return false;
    if (!(amount == rhs.amount))
      return false;
    if (!(time == rhs.time))
      return false;
    return true;
  }
  bool operator != (const QueryResultRedPacketDto &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryResultRedPacketDto & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(QueryResultRedPacketDto &a, QueryResultRedPacketDto &b);

inline std::ostream& operator<<(std::ostream& out, const QueryResultRedPacketDto& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _QueryByUserIdDto__isset {
  _QueryByUserIdDto__isset() : userId(false) {}
  bool userId :1;
} _QueryByUserIdDto__isset;

class QueryByUserIdDto {
 public:

  QueryByUserIdDto(const QueryByUserIdDto&);
  QueryByUserIdDto& operator=(const QueryByUserIdDto&);
  QueryByUserIdDto() : userId(0) {
  }

  virtual ~QueryByUserIdDto() throw();
  int32_t userId;

  _QueryByUserIdDto__isset __isset;

  void __set_userId(const int32_t val);

  bool operator == (const QueryByUserIdDto & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    return true;
  }
  bool operator != (const QueryByUserIdDto &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryByUserIdDto & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(QueryByUserIdDto &a, QueryByUserIdDto &b);

inline std::ostream& operator<<(std::ostream& out, const QueryByUserIdDto& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _QueryResultUserDto__isset {
  _QueryResultUserDto__isset() : redPacketId(false), amount(false), time(false) {}
  bool redPacketId :1;
  bool amount :1;
  bool time :1;
} _QueryResultUserDto__isset;

class QueryResultUserDto {
 public:

  QueryResultUserDto(const QueryResultUserDto&);
  QueryResultUserDto& operator=(const QueryResultUserDto&);
  QueryResultUserDto() : redPacketId(0), amount(0), time() {
  }

  virtual ~QueryResultUserDto() throw();
  int32_t redPacketId;
  int32_t amount;
  std::string time;

  _QueryResultUserDto__isset __isset;

  void __set_redPacketId(const int32_t val);

  void __set_amount(const int32_t val);

  void __set_time(const std::string& val);

  bool operator == (const QueryResultUserDto & rhs) const
  {
    if (!(redPacketId == rhs.redPacketId))
      return false;
    if (!(amount == rhs.amount))
      return false;
    if (!(time == rhs.time))
      return false;
    return true;
  }
  bool operator != (const QueryResultUserDto &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryResultUserDto & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(QueryResultUserDto &a, QueryResultUserDto &b);

inline std::ostream& operator<<(std::ostream& out, const QueryResultUserDto& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _QueryResultReceiveUserDto__isset {
  _QueryResultReceiveUserDto__isset() : redPacketId(false), userId(false), userName(false), amount(false), time(false) {}
  bool redPacketId :1;
  bool userId :1;
  bool userName :1;
  bool amount :1;
  bool time :1;
} _QueryResultReceiveUserDto__isset;

class QueryResultReceiveUserDto {
 public:

  QueryResultReceiveUserDto(const QueryResultReceiveUserDto&);
  QueryResultReceiveUserDto& operator=(const QueryResultReceiveUserDto&);
  QueryResultReceiveUserDto() : redPacketId(0), userId(0), userName(), amount(0), time() {
  }

  virtual ~QueryResultReceiveUserDto() throw();
  int32_t redPacketId;
  int32_t userId;
  std::string userName;
  int32_t amount;
  std::string time;

  _QueryResultReceiveUserDto__isset __isset;

  void __set_redPacketId(const int32_t val);

  void __set_userId(const int32_t val);

  void __set_userName(const std::string& val);

  void __set_amount(const int32_t val);

  void __set_time(const std::string& val);

  bool operator == (const QueryResultReceiveUserDto & rhs) const
  {
    if (!(redPacketId == rhs.redPacketId))
      return false;
    if (!(userId == rhs.userId))
      return false;
    if (!(userName == rhs.userName))
      return false;
    if (!(amount == rhs.amount))
      return false;
    if (!(time == rhs.time))
      return false;
    return true;
  }
  bool operator != (const QueryResultReceiveUserDto &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryResultReceiveUserDto & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(QueryResultReceiveUserDto &a, QueryResultReceiveUserDto &b);

inline std::ostream& operator<<(std::ostream& out, const QueryResultReceiveUserDto& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
